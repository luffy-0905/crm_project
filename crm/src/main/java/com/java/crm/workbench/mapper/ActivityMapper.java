package com.java.crm.workbench.mapper;

import com.java.crm.workbench.domain.Activity;

import java.util.List;
import java.util.Map;

public interface ActivityMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Sat Jun 04 16:07:25 CST 2022
     */
    int deleteByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Sat Jun 04 16:07:25 CST 2022
     */
    int insertSelective(Activity record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Sat Jun 04 16:07:25 CST 2022
     */
    Activity selectByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Sat Jun 04 16:07:25 CST 2022
     */
    int updateByPrimaryKeySelective(Activity record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Sat Jun 04 16:07:25 CST 2022
     */
    int updateByPrimaryKey(Activity record);

    /**
     * 保存创建的市场活动
     */
    int insertActivity(Activity activity);

    /**
     * 根据条件分页查询市场活动的列表
     */
    List<Activity> selectActivityByConditionForPage(Map<String,Object> map);

    /**
     * 根据条件查询市场活动的总条数
     */
    int selectCountOfActivityByCondition(Map<String,Object> map);

    /**
     * 根据id批量删除activity
     * @param ids
     * @return
     */
    int deleteActivityById(String[] ids);

    /**
     * 根据id查询activity
     * @param id
     * @return
     */
    Activity selectActivityById(String id);

    /**
     * 保存更新activity
     * @param activity
     * @return
     */
    int saveEditActivity(Activity activity);

    /**
     * 查询所有的活动
     * @return
     */
    List<Activity> selectAllActivities();

    /**
     * 根据id查询Activity
     * @param id
     * @return
     */
    List<Activity> selectPartActivityById(String[] id);

    /**
     * 批量保存创建的市场活动
     * @param activityList
     * @return
     */
    int insertActivityByBatch(List<Activity> activityList);

    /**
     * 根据id查询activity的详细信息
     * @param id
     * @return
     */
    Activity selectActivityForDetailById(String id);

    /**
     * 根据clueId查询线索想关联的市场活动明细信息
     * @param clueId
     * @return
     */
    List<Activity> selectActivityForDetailByClueId(String clueId);

    /**
     * 根据name模糊查询市场活动，并且把已经和clueId关联的市场活动排除
     * @param map
     * @return
     */
    List<Activity> selectActivityForDetailByNameAndClueId(Map<String,Object> map);

    /**
     * 根据id数组查询市场活动明细信息
     * @param ids
     * @return
     */
    List<Activity> selectActivityForDetailByIds(String[] ids);

    /**
     * 根据name模糊查询市场活动，并且查询和clueId关联的市场活动
     * @param map
     * @return
     */
    List<Activity> selectActivityForConvertByNameAndClueId(Map<String,Object> map);
}